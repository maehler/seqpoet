#!/usr/bin/env python
from __future__ import print_function
import argparse
import itertools
import os
import sys

import seqpoet

def get_probe(fname):
    with open(fname) as f:
        try:
            seqs = [seqpoet.sequence.Sequence(line.strip()) for line in f \
                if len(line.strip()) > 0]
        except ValueError:
            print('ERROR: probe file does not contain valid sequences',
                file=sys.stderr)
            exit(1)

    if len(seqs) == 0:
        print('ERROR: probe file is empty', file=sys.stderr)
        exit(1)
    elif len(seqs) > 2:
        print('ERROR: probe file contains too many sequences', file=sys.stderr)
        exit(1)

    return seqs

def get_single_sequence(fname, genbank_only=False, stop_on_error=False):
    seq = None
    genbank_success = False
    fasta_success = False
    try:
        seq = seqpoet.GenBank(fname)
        genbank_success = True
    except seqpoet.genbank.ParsingError:
        pass

    if not genbank_success and not genbank_only:
        try:
            seq = seqpoet.Fasta(fname)
            fasta_success = True
        except ValueError:
            pass

    if not (genbank_success or fasta_success):
        if genbank_only:
            if stop_on_error:
                print('ERROR: file ignored. If you want to perform '
                    'operon extraction, you need annotations. Currently only '
                    'GenBank files are supported.', file=sys.stderr)
                sys.exit(1)
            print('ignored', file=sys.stderr)
            return 1
        else:
            if stop_on_error:
                print('ERROR: parsing failed', file=sys.stderr)
            print('parsing failed', file=sys.stderr)
            return -1
    else:
        print('{0} sequence{1}'.format(len(seq), 's' if len(seq) > 1 else ''),
            file=sys.stderr)
        return seq

def get_sequences(dirname, genbank_only=False):
    files = filter(os.path.isfile,
        [os.path.join(dirname, x) for x in os.listdir(dirname)])

    n_ignore = 0
    n_fail = 0
    seqs = {}

    print('Parsing sequence files', file=sys.stderr)

    for fname in files:
        print('\t{0}'.format(fname), file=sys.stderr, end='\t')
        parse_res = get_single_sequence(fname, genbank_only)
        if parse_res == -1:
            n_fail += 1
        elif parse_res == 1:
            n_ignore += 1
        else:
            seqs[fname] = parse_res

    if n_ignore > 0:
        print('WARNING: {0} file{1} ignored. If you want to perform '
            'operon extraction, you need annotations. Currently only '
            'GenBank files are supported.'.format(n_ignore,
            's' if n_ignore > 1 else ''), file=sys.stderr)
    if n_fail > 0:
        print('WARNING: parsing failed for {0} file{1}'.format(n_fail,
            's' if n_fail > 1 else ''), file=sys.stderr)
    if len(seqs) == 0:
        print('ERROR: no sequence files found', file=sys.stderr)
        exit(1)

    return seqs

def match_probe(probe, seqs, mismatches=2, minus_revcomp=True):
    matches = []
    pl = len(probe)
    for fname, f in seqs.iteritems():
        try:
            for i, record in enumerate(f):
                res1 = seqpoet.search.search(str(probe), str(record.seq),
                    mismatches=mismatches)
                res2 = [len(record.seq) - x - pl for x in \
                    seqpoet.search.search(str(probe), str(record.seq.revcomp()),
                        mismatches=mismatches)]

                if len(res1) > 0:
                    for start in res1:
                        hit_seq = record.seq[start:start + pl]
                        matches.append({
                            'filename': f.filename,
                            'seqname': record.name,
                            'seqindex': i,
                            'hitstart': start + 1,
                            'hitend': start + pl,
                            'length': pl,
                            'seq': hit_seq,
                            'strand': '+'
                        })

                if len(res2) > 0:
                    for start in res2:
                        hit_seq = record.seq[start:start + pl]
                        if minus_revcomp:
                            hit_seq = hit_seq.revcomp()
                        matches.append({
                            'filename': f.filename,
                            'seqname': record.name,
                            'seqindex': i,
                            'hitstart': start + 1,
                            'hitend': start + pl,
                            'length': pl,
                            'seq': hit_seq,
                            'strand': '-'
                        })
        except seqpoet.genbank.ParsingError as pe:
            print('ERROR: parsing failed in {0}: {1}'.format(fname, pe.message))
            sys.exit(1)

    return matches


def match_primer(primers, seqs, mismatches=2, minus_revcomp=True,
        min_product=0, max_product=3000):
    matches = []
    pl1 = len(primers[0])
    pl2 = len(primers[1])
    for fname, f in seqs.iteritems():
        try:
            for i, record in enumerate(f):
                res1_1 = seqpoet.search.search(str(primers[0]), str(record.seq),
                    mismatches=mismatches)
                res1_2 = [len(record.seq) - x - pl1 for x in \
                    seqpoet.search.search(str(primers[0]), str(record.seq.revcomp()),
                        mismatches=mismatches)]

                res2_1 = seqpoet.search.search(str(primers[1]), str(record.seq),
                    mismatches=mismatches)
                res2_2 = [len(record.seq) - x - pl2 for x in \
                    seqpoet.search.search(str(primers[1]), str(record.seq.revcomp()),
                        mismatches=mismatches)]

                # Match res1_1 with res2_2 and res2_1 with res1_2 to get primer
                # pairs. The first position must be smaller than the second
                # position, and the product length must be within the allowed
                # range.

                if len(res1_1) > 0 and len(res2_2) > 0:
                    # Match them
                    for start, end in itertools.product(res1_1, res2_2):
                        if start >= end:
                            continue
                        product_length = end - start + pl2
                        if product_length < min_product or \
                                product_length > max_product:
                            continue
                        hit_seq = record.seq[start:start + product_length]
                        matches.append({
                            'filename': f.filename,
                            'seqname': record.name,
                            'seqindex': i,
                            'hitstart': start + 1,
                            'hitend': end + pl1,
                            'length': product_length,
                            'seq': hit_seq,
                            'strand': '+'
                        })

                if len(res2_1) > 0 and len(res1_2) > 0:
                    for start, end in itertools.product(res2_1, res1_2):
                        if start >= end:
                            continue
                        product_length = end - start + pl1
                        if product_length < min_product or \
                                product_length > max_product:
                            continue
                        hit_seq = record.seq[start:start + product_length]
                        if minus_revcomp:
                            hit_seq = hit_seq.revcomp()
                        matches.append({
                            'filename': f.filename,
                            'seqname': record.name,
                            'seqindex': i,
                            'hitstart': start + 1,
                            'hitend': end + pl1,
                            'length': product_length,
                            'seq': hit_seq,
                            'strand': '-'
                        })
        except seqpoet.genbank.ParsingError as pe:
            print('ERROR: parsing failed in {0}: {1}'.format(fname, pe.message))
            sys.exit(1)
        except ValueError as ve:
            print('ERROR: parsing failed in {0}: {1}'.format(fname, ve.message))
            sys.exit(1)

    return matches

def find_operon(matches, seqs, max_distance=500, minus_revcomp=True,
        extend_downstream=0, extend_upstream=0):
    match_operon = []
    for m in matches:
        gb = seqs[m['filename']]
        locus = gb[m['seqindex']]
        if m['strand'] == '+':
            location = seqpoet.genbank.Location.from_int(
                max(1, m['hitstart'] - extend_upstream),
                m['hitend'] + extend_downstream)
        else:
            location = seqpoet.genbank.Location.from_int(
                max(1, m['hitstart'] - extend_downstream),
                m['hitend'] + extend_upstream)

        features = filter(lambda x: x.location.is_complement == \
            (m['strand'] == '-'),  locus.features_at_location(location))

        if len(features) == 0:
            print('WARNING: no gene for match in locus {0}'.format(m['seqname']),
                file=sys.stderr)
            continue

        upstream_edge = False
        downstream_edge = False
        operon_genes = []
        for f in features:
            # Find upstream genes
            us = locus.next_upstream(f)
            while us is not None and \
                    us.location.min_distance(f.location) < max_distance:
                operon_genes.append(us)
                us = locus.next_upstream(us)

            if us is None:
                # We hit the edge of the sequence.
                upstream_edge = True

            # Add the current feature
            operon_genes.append(f)

            # Find downstream genes
            ds = locus.next_downstream(f)
            while ds is not None and \
                    ds.location.min_distance(f.location) < max_distance:
                operon_genes.append(ds)
                ds = locus.next_downstream(ds)

            if ds is None:
                downstream_edge = True

        if len(operon_genes) == 1:
            print('WARNING: only one gene found for match in locus '
                '{0}, not an operon'.format(m['seqname']), file=sys.stderr)

        operon_genes = sorted(operon_genes, key=lambda x: x.location.start)
        min_start = operon_genes[0].location.start
        max_end = operon_genes[-1].location.end

        operon_seq = locus.seq[min_start:max_end]

        if minus_revcomp and m['strand'] == '-':
            operon_seq = operon_seq.revcomp()

        match_operon.append({
            'filename': m['filename'],
            'seqname': m['seqname'],
            'hitstart': min_start + 1,
            'hitend': max_end + 1,
            'length': m['length'],
            'strand': m['strand'],
            'upstream_edge': upstream_edge,
            'downstream_edge': downstream_edge,
            'operon': operon_genes,
            'seq': operon_seq
        })

    return match_operon

def write_fasta(matches, filename=sys.stdout):
    if isinstance(filename, file):
        f = filename
        close = False
    else:
        f = open(filename, 'w')
        close = True

    for m in matches:
        m['filename'] = os.path.basename(m['filename'])
        s = seqpoet.fasta.FastaRecord(m['seq'],
            '{filename}:{seqname}:{hitstart}:{hitend}:{length}:{strand}' \
                .format(**m))
        print(s, file=f)

    if close:
        f.close()

def parse_args():
    parser = argparse.ArgumentParser(description='For more detailed '
        'documentation, see http://seqpoet.readthedocs.org')

    parser.add_argument('genomedir', help=('directory containing the genome '
        'files to use (FASTA or GenBank format) or a single GenBank or '
        'FASTA file'))
    parser.add_argument('probe', help=('file containing either a '
        'single sequence (probe) or a pair of sequences (primer pair; one '
        'sequence per line)'))

    parser.add_argument('--pcr', help=('only perform in silico PCR. Requires '
        'that the probe file contains a primer pair (default: perform '
        'operon extraction)'), action='store_true')

    parser.add_argument('-m', '--mismatches', help=('the maximum number of '
        'mismatches allowed when aligning probe/primer to the genome '
        '(default: %(default)d)'),
        type=int, default=2, metavar='int')

    parser.add_argument('-d', '--max-distance', help=('the maximum intergenic '
        'distance allowed when assembling operons (default: %(default)d)'),
        type=int, default=500, metavar='int')

    parser.add_argument('--min-product', help=('minimum PCR product length '
        'to consider (default: %(default)d)'), type=int, default=0,
        metavar='int')

    parser.add_argument('--max-product', help=('maximum PCR product length '
        'to consider (default: %(default)d)'), type=int, default=3000,
        metavar='int')

    parser.add_argument('--no-revcomp', help=('don\'t reverse complement '
        'results on the minus strand (default: do reverse complementation)'),
        action='store_false', dest='minus_revcomp')

    parser.add_argument('--downstream', help=('extend probe/primer match '
        '%(metavar)s bases downstream for operon finding (default: '
        '%(default)s)'), metavar='int', default=0, type=int)

    parser.add_argument('--upstream', help=('extend probe/primer match '
        '%(metavar)s bases upstream for operon finding (default: '
        '%(default)s)'), metavar='int', default=0, type=int)

    parser.add_argument('-o', '--out', help='file for output (default: stdout)',
        default=sys.stdout, metavar='file')

    parser.add_argument('--version', help=('print version and exit'),
        action='version', version='%(prog)s v{0}'.format(seqpoet.__version__))

    args = parser.parse_args()

    args.genomedir = os.path.abspath(args.genomedir)
    args.probe = os.path.abspath(args.probe)

    # Check paths
    if not os.path.exists(args.genomedir):
        parser.error('file or directory not found: {}'.format(args.genomedir))
    args.isdir = os.path.isdir(args.genomedir)
    if not os.path.exists(args.probe):
        parser.error('file or directory not found: {}'.format(args.probe))

    if not os.path.isfile(args.probe):
        parser.error('probe is not a file: {}'. format(args.probe))

    if not isinstance(args.out, file):
        args.out = os.path.abspath(args.out)
        if not os.path.exists(os.path.dirname(args.out)):
            parser.error('file or directory not found: {}'.format(args.out))

    # Mismatches, distance, max/min product length and upstream/downstream
    # should be integers >= 0
    if args.mismatches < 0:
        parser.error('mismatches must not be negative')
    if args.max_distance < 0:
        parser.error('max-distance must not be negative')
    if args.min_product < 0:
        parser.error('minimum product length must not be negative')
    if args.max_product < 0:
        parser.error('maximum product length must not be negative')
    if args.downstream < 0:
        parser.error('downstream extension must not be negative')
    if args.upstream < 0:
        parser.error('upstream extension must not be negative')

    return args

def main():
    args = parse_args()

    probe = get_probe(args.probe)
    is_primer = len(probe) == 2

    if args.pcr and not is_primer:
        print('ERROR: --pcr requires a primer pair, not a single probe',
            file=sys.stderr)
        exit(1)

    if args.isdir:
        seqs = get_sequences(args.genomedir, genbank_only=not args.pcr)
    else:
        seqs = {args.genomedir: get_single_sequence(args.genomedir,
            genbank_only=not args.pcr, stop_on_error=True)}

    print('Finding {0} matches'.format('primer' if is_primer else 'probe'),
        file=sys.stderr)
    if is_primer:
        matches = match_primer(probe, seqs, mismatches=args.mismatches,
            min_product=args.min_product, max_product=args.max_product,
            minus_revcomp=args.minus_revcomp)
    else:
        matches = match_probe(probe[0], seqs, mismatches=args.mismatches,
            minus_revcomp=args.minus_revcomp)

    if len(matches) == 0:
        print('WARNING: no matches found', file=sys.stderr)
        exit(0)

    match_files = set([x['filename'] for x in matches])

    print('Found {0} match{1} in {2} file{3}'.format(len(matches),
        'es' if len(matches) > 1 or len(matches) == 0 else '',
        len(match_files), 's' if len(match_files) > 1 else ''), file=sys.stderr)

    # In silico PCR results
    if is_primer and args.pcr:
        write_fasta(matches, filename=args.out)
        exit(0)

    # Operon extraction
    print('Looking for operons', file=sys.stderr)
    match_features = find_operon(matches, seqs, max_distance=args.max_distance,
        extend_downstream=args.downstream, extend_upstream=args.upstream,
        minus_revcomp=args.minus_revcomp)

    if len(match_features) == 0:
        print('WARNING: no operons found', file=sys.stderr)
        exit(0)

    # Some statistics
    edges_upstream = sum(x['upstream_edge'] for x in match_features)
    edges_downstream = sum(x['downstream_edge'] for x in match_features)

    print('Found {0} operon{1} in {2} file{3}'.format(
        len(match_features), 's' if len(match_features) != 1 else '',
        len(seqs), 's' if len(seqs) != 1 else ''), file=sys.stderr)
    print('{0} operon{1} reached the sequence edge upstream of the match'.format(
        edges_upstream, 's' if edges_upstream != 1 else ''), file=sys.stderr)
    print('{0} operon{1} reached the sequence edge downstream of the match'.format(
        edges_downstream, 's' if edges_downstream != 1 else ''), file=sys.stderr)

    operon_files = set([x['filename'] for x in match_features])
    for s in seqs.itervalues():
        fname = s.filename
        if fname in match_files:
            n_matches = sum([x['filename'] == fname for x in matches])
            print('{0}:'.format(os.path.basename(fname)), file=sys.stderr)
            print('\t{1} match{2}'.format(fname, n_matches,
                'es' if n_matches > 1 else ''), file=sys.stderr)
            if fname in operon_files:
                operons = [x for x in match_features if x['filename'] == fname]
                n_operons = len(operons)
                print('\t{0} operon{1}'.format(n_operons,
                    's' if n_operons > 1 else ''), file=sys.stderr)
                for o in operons:
                    if o['upstream_edge']:
                        print('operon in {0} hit upstream edge'.format(
                            o['seqname']), file=sys.stderr)
                    if o['downstream_edge']:
                        print('\toperon in {0} hit downstream edge'.format(
                            o['seqname']), file=sys.stderr)
            else:
                print('\t0 operons', file=sys.stderr)
        else:
            print('{0}:\n\tno matches'.format(os.path.basename(fname)),
                file=sys.stderr)

    write_fasta(match_features, filename=args.out)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Keyboard interrupt', file=sys.stderr)
        exit(1)
