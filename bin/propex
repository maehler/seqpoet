#!/usr/bin/env python
from __future__ import print_function
import argparse
import itertools
import os
import sys

import propex

def get_probe(fname):
    with open(fname) as f:
        try:
            seqs = [propex.sequence.Sequence(line.strip()) for line in f \
                if len(line.strip()) > 0]
        except ValueError:
            print('ERROR: probe file does not contain valid sequences',
                file=sys.stderr)
            exit(1)

    if len(seqs) == 0:
        print('ERROR: probe file is empty', file=sys.stderr)
        exit(1)
    elif len(seqs) > 2:
        print('ERROR: probe file contains too many sequences', file=sys.stderr)

    return seqs

def get_single_sequence(fname, genbank_only=False, stop_on_error=False):
    seq = None
    genbank_success = False
    fasta_success = False
    try:
        seq = propex.GenBank(fname)
        genbank_success = True
    except propex.genbank.ParsingError:
        pass

    if not genbank_success and not genbank_only:
        try:
            seq = propex.Fasta(fname)
            fasta_success = True
        except ValueError:
            pass

    if not (genbank_success or fasta_success):
        if genbank_only:
            if stop_on_error:
                print('ERROR: file ignored. If you want to perform '
                    'operon extraction, you need annotations. Currently only '
                    'GenBank files are supported.', file=sys.stderr)
                sys.exit(1)
            print('ignored', file=sys.stderr)
            return 1
        else:
            if stop_on_error:
                print('ERROR: parsing failed', file=sys.stderr)
            print('parsing failed', file=sys.stderr)
            return -1
    else:
        print('{0} sequence{1}'.format(len(seq), 's' if len(seq) > 1 else ''),
            file=sys.stderr)
        return seq

def get_sequences(dirname, genbank_only=False):
    files = filter(os.path.isfile,
        [os.path.join(dirname, x) for x in os.listdir(dirname)])

    n_ignore = 0
    n_fail = 0
    seqs = {}

    print('Parsing sequence files', file=sys.stderr)

    for fname in files:
        print('\t{0}'.format(fname), file=sys.stderr, end='\t')
        parse_res = get_single_sequence(fname, genbank_only)
        if parse_res == -1:
            n_fail += 1
        elif parse_res == 1:
            n_ignore += 1
        else:
            seqs[fname] = parse_res

    if n_ignore > 0:
        print('WARNING: {0} file{1} ignored. If you want to perform '
            'operon extraction, you need annotations. Currently only '
            'GenBank files are supported.'.format(n_ignore,
            's' if n_ignore > 1 else ''), file=sys.stderr)
    if n_fail > 0:
        print('WARNING: parsing failed for {0} file{1}'.format(n_fail,
            's' if n_fail > 1 else ''), file=sys.stderr)
    if len(seqs) == 0:
        print('ERROR: no sequence files found', file=sys.stderr)
        exit(1)

    return seqs

def match_probe(probe, seqs, mismatches=2):
    matches = []
    pl = len(probe)
    for f in seqs.itervalues():
        for i, record in enumerate(f):
            res1 = propex.search.search(str(probe), str(record.seq),
                mismatches=mismatches)
            res2 = [len(record.seq) - x - pl for x in \
                propex.search.search(str(probe), str(record.seq.revcomp()),
                    mismatches=mismatches)]

            if len(res1) > 0:
                for start in res1:
                    hit_seq = record.seq[start:start + pl]
                    matches.append({
                        'filename': f.filename,
                        'seqname': record.name,
                        'seqindex': i,
                        'hitstart': start + 1,
                        'hitend': start + pl,
                        'length': pl,
                        'seq': hit_seq,
                        'strand': '+'
                    })

            if len(res2) > 0:
                for start in res2:
                    hit_seq = record.seq[start:start + pl]
                    matches.append({
                        'filename': f.filename,
                        'seqname': record.name,
                        'seqindex': i,
                        'hitstart': start + 1,
                        'hitend': start + pl,
                        'length': pl,
                        'seq': hit_seq,
                        'strand': '-'
                    })
    return matches


def match_primer(primers, seqs, mismatches=2,
        min_product=0, max_product=3000):
    matches = []
    pl1 = len(primers[0])
    pl2 = len(primers[1])
    for f in seqs.itervalues():
        for i, record in enumerate(f):
            res1_1 = propex.search.search(str(primers[0]), str(record.seq),
                mismatches=mismatches)
            res1_2 = [len(record.seq) - x - pl1 for x in \
                propex.search.search(str(primers[0]), str(record.seq.revcomp()),
                    mismatches=mismatches)]

            res2_1 = propex.search.search(str(primers[1]), str(record.seq),
                mismatches=mismatches)
            res2_2 = [len(record.seq) - x - pl2 for x in \
                propex.search.search(str(primers[1]), str(record.seq.revcomp()),
                    mismatches=mismatches)]

            # Match res1_1 with res2_2 and res2_1 with res1_2 to get primer
            # pairs. The first position must be smaller than the second
            # position, and the product length must be within the allowed
            # range.

            if len(res1_1) > 0 and len(res2_2) > 0:
                # Match them
                for start, end in itertools.product(res1_1, res2_2):
                    if start >= end:
                        continue
                    product_length = end - start + pl2
                    if product_length < min_product or \
                            product_length > max_product:
                        continue
                    hit_seq = record.seq[start:start + product_length]
                    matches.append({
                        'filename': f.filename,
                        'seqname': record.name,
                        'seqindex': i,
                        'hitstart': start + 1,
                        'hitend': end + pl1,
                        'length': product_length,
                        'seq': hit_seq,
                        'strand': '+'
                    })

            if len(res2_1) > 0 and len(res1_2) > 0:
                for start, end in itertools.product(res2_1, res1_2):
                    if start >= end:
                        continue
                    product_length = end - start + pl1
                    if product_length < min_product or \
                            product_length > max_product:
                        continue
                    hit_seq = record.seq[start:start + product_length]
                    matches.append({
                        'filename': f.filename,
                        'seqname': record.name,
                        'seqindex': i,
                        'hitstart': start + 1,
                        'hitend': end + pl1,
                        'length': product_length,
                        'seq': hit_seq,
                        'strand': '-'
                    })

    return matches

def find_operon(matches, seqs, max_distance=500):
    match_operon = []
    for m in matches:
        gb = seqs[m['filename']]
        locus = gb[m['seqindex']]
        location = propex.genbank.Location.from_int(m['hitstart'], m['hitend'])
        features = locus.features_at_location(location)
        if len(features) == 0:
            print('WARNING: no gene for match in locus {0}'.format(m['seqname']),
                file=sys.stderr)
            continue
        operon_genes = []
        for f in features:
            # Find upstream genes
            us = locus.next_upstream(f)
            while us is not None and \
                    us.location.min_distance(f.location) < max_distance:
                operon_genes.append(us)
                us = locus.next_upstream(us)

            # Add the current feature
            operon_genes.append(f)

            # Find downstream genes
            ds = locus.next_downstream(f)
            while ds is not None and \
                    ds.location.min_distance(f.location) < max_distance:
                operon_genes.append(ds)
                ds = locus.next_downstream(ds)

        if len(operon_genes) == 1:
            print('WARNING: only one gene found for match in locus '
                '{0}, not an operon'.format(m['seqname']), file=sys.stderr)

        operon_genes = sorted(operon_genes, key=lambda x: x.location.start)
        min_start = operon_genes[0].location.start
        max_end = operon_genes[-1].location.end

        operon_seq = locus.seq[min_start:max_end]

        # Reverse complement matches on minus-strand?

        match_operon.append({
            'filename': m['filename'],
            'seqname': m['seqname'],
            'hitstart': m['hitstart'],
            'hitend': m['hitend'],
            'length': m['length'],
            'strand': m['strand'],
            'operon': operon_genes,
            'seq': operon_seq
        })

    return match_operon

def write_fasta(matches, filename=sys.stdout):
    if isinstance(filename, file):
        f = filename
        close = False
    else:
        f = open(filename, 'w')
        close = True

    for m in matches:
        m['filename'] = os.path.basename(m['filename'])
        s = propex.fasta.FastaRecord(m['seq'],
            '{filename}:{seqname}:{hitstart}:{hitend}:{length}:{strand}' \
                .format(**m))
        print(s, file=f)

    if close:
        f.close()

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('genomedir', help=('directory containing the genome '
        'files to use (FASTA or GenBank format) or a single GenBank or '
        'FASTA file'))
    parser.add_argument('probe', help=('file containing either a '
        'single sequence (probe) or a pair of sequences (primer pair; one '
        'sequence per line)'))

    parser.add_argument('--pcr', help=('only perform in silico PCR. Requires '
        'that the probe file contains a primer pair (default: perform '
        'operon extraction)'), action='store_true')

    parser.add_argument('-m', '--mismatches', help=('the maximum number of '
        'mismatches allowed when aligning probe/primer to the genome '
        '(default: %(default)d)'),
        type=int, default=2, metavar='N')

    parser.add_argument('-d', '--max-distance', help=('the maximum intergenic '
        'distance allowed when assembling operons (default: %(default)d)'),
        type=int, default=500, metavar='N')

    parser.add_argument('--min-product', help=('minimum PCR product length '
        'to consider (default: %(default)d)'), type=int, default=0,
        metavar='N')

    parser.add_argument('--max-product', help=('maximum PCR product length '
        'to consider (default: %(default)d)'), type=int, default=3000,
        metavar='N')

    parser.add_argument('-o', '--out', help='file for output (default: stdout)',
        default=sys.stdout)

    parser.add_argument('--version', help=('print version and exit'),
        action='version', version='%(prog)s v{0}'.format(propex.__version__))

    args = parser.parse_args()

    args.genomedir = os.path.abspath(args.genomedir)
    args.probe = os.path.abspath(args.probe)

    # Check paths
    if not os.path.exists(args.genomedir):
        parser.error('file or directory not found: {}'.format(args.genomedir))
    args.isdir = os.path.isdir(args.genomedir)
    if not os.path.exists(args.probe):
        parser.error('file or directory not found: {}'.format(args.probe))

    if not isinstance(args.out, file):
        args.out = os.path.abspath(args.out)
        if not os.path.exists(os.path.dirname(args.out)):
            parser.error('file or directory not found: {}'.format(args.out))

    # Mismatches, distance and max/min product length should be integers >= 0
    if args.mismatches < 0:
        parser.error('mismatches must not be negative')
    if args.max_distance < 0:
        parser.error('max-distance must not be negative')
    if args.min_product < 0:
        parser.error('minimum product length must not be negative')
    if args.max_product < 0:
        parser.error('maximum product length must not be negative')

    return args

def main():
    args = parse_args()

    probe = get_probe(args.probe)
    is_primer = len(probe) == 2

    if args.pcr and not is_primer:
        print('ERROR: --pcr requires a primer pair, not a single probe',
            file=sys.stderr)
        exit(1)

    if args.isdir:
        seqs = get_sequences(args.genomedir, genbank_only=not args.pcr)
    else:
        seqs = {args.genomedir: get_single_sequence(args.genomedir,
            genbank_only=not args.pcr, stop_on_error=True)}

    print('Finding {0} matches'.format('primer' if is_primer else 'probe'),
        file=sys.stderr)
    if is_primer:
        matches = match_primer(probe, seqs, mismatches=args.mismatches,
            min_product=args.min_product, max_product=args.max_product)
    else:
        matches = match_probe(probe[0], seqs, mismatches=args.mismatches)

    print('Found {0} match{1}'.format(len(matches),
        'es' if len(matches) > 1 or len(matches) == 0 else ''), file=sys.stderr)

    if len(matches) == 0:
        print('WARNING: no matches found', file=sys.stderr)
        exit(0)

    # In silico PCR results
    if is_primer and args.pcr:
        write_fasta(matches, filename=args.out)
        exit(0)

    # Operon extraction
    print('Looking for operons', file=sys.stderr)
    match_features = find_operon(matches, seqs, max_distance=args.max_distance)

    if len(match_features) == 0:
        print('WARNING: no operons found', file=sys.stderr)
        exit(0)

    write_fasta(match_features, filename=args.out)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Keyboard interrupt', file=sys.stderr)
        exit(1)
